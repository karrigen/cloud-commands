# get instance ID
oci compute instance list --region "syd" --compartment-id "$compartment_id" --query 'data[0]' 
# restart instance by instance ID
oci compute instance action --instance-id <instance_OCID> --action reset
# all instances from all regions sort by compartment ID 
$regions=get-content regions.txt
$compartment=get-content compartment.txt
foreach ($i in $regions) {
    $i
    oci search resource structured-search `
        --query-text "QUERY instance resources return region" `
        --region $i `
        --query 'sort_by(data.items[].{name:"display-name",compartment:"compartment-id"},&compartment)' `
        --output table
}
foreach ($i in $regions) {
    $i
    foreach ($compartment_id in $compartment) { 
        $compartment_id
        oci compute instance list `
            --compartment-id $compartment_id `
            --region $i `
            --query 'length(data)' 
    }
}

# query for dead VM
oci search resource structured-search \
    --region 'iad' \
    --query-text "QUERY instance resources return region where lifeCycleState = 'TERMINATED'|| lifeCycleState = 'STOPPED'" \
    --query 'data.items[*].{name:"display-name",state:"lifecycle-state", region:"additional-details"."region"}' \
    --output table
# query for all VMs from a region
oci search resource structured-search `
    --region 'jed' `
    --query-text "QUERY instance resources return region where lifeCycleState = 'running'" `
    --query 'sort_by(data.items[].{name:"display-name",state:"lifecycle-state", region:"additional-details"."region", Environment:"defined-tags"."Hosting"."Environment",OS:"freeform-tags"."os",role:"freeform-tags"."role",ansible:"freeform-tags"."ansible_managed",terraform:"freeform-tags"."terraform_managed"},&name)'  `
    --output table
oci search resource structured-search `
    --region 'syd' `
    --query-text "QUERY instance resources return region where lifeCycleState = 'running'" `
    --query 'data.items[].{name:"display-name",role:"freeform-tags"."role",id:"identifier"}' `
    --output table
# Domino Servers from syd
oci search resource structured-search \
    --query-text "QUERY instance resources return region where freeformTags.key = 'role' && freeformTags.value = 'integrum_domino_client_instance'" \
    --region 'syd' \
    --query 'data.items[]."display-name"' \
    | jq  -r '.[]' 
# query for all VMs from a compartment a region
oci compute instance list \
    --compartment-id $compartment_id \
    --region 'lhr' \
    --query 'sort_by(data[*].{name:"display-name",state:"lifecycle-state",region:"additional-details"."region",Environment:"defined-tags"."Hosting"."Environment",OS:"freeform-tags"."os",role:"freeform-tags"."role",ansible:"freeform-tags"."ansible_managed",terraform:"freeform-tags"."terraform_managed"},&name)' \
    --output table
# count
oci compute instance list --compartment-id $compartment_id --region='syd' --query 'length(data)'
## display name only
oci search resource structured-search `
    --region 'phx' `
    --query-text "QUERY instance resources return region where lifeCycleState = 'running'" `
    --query 'data.items[]."display-name"' `
    | jq  -r '.[]' 
# query for a specifi VM by instance name from a region 
oci search resource structured-search \
    --query-text "QUERY instance resources return region where displayName =~ 'AB1CLDBA01'" \
    --region 'iad' \
    --query 'data.items[].{name:"display-name",state:"lifecycle-state", region:"additional-details"."region", Environment:"defined-tags"."Hosting"."Environment",OS:"freeform-tags"."os",role:"freeform-tags"."role",ansible:"freeform-tags"."ansible_managed",terraform:"freeform-tags"."terraform_managed"}' \
    --output table
# query for a specifi VM by ocid
oci compute instance list --compartment-id $compartment_id --query "data[?id=='ocid1.onstopic.oc1.iad.aaaaaaaatx25a3yrryzhoktmu3itba7qfgyi5qibnglko22rip2svor524ma'].\"display-name\"" 
# query for all VMs managed by Ansible from a region 
oci search resource structured-search \
    --region 'syd' \
    --query-text "QUERY instance resources return region where freeformTags.key = 'ansible_managed' && freeformTags.value =~ 'true'" \
    --query 'data.items[*].{name:"display-name",state:"lifecycle-state", region:"additional-details"."region", Environment:"defined-tags"."Hosting"."Environment",OS:"freeform-tags"."os",role:"freeform-tags"."role",ansible:"freeform-tags"."ansible_managed",terraform:"freeform-tags"."terraform_managed"}' \
    --output table
# return all possbile attributes
oci search resource structured-search --query-text 'QUERY instance resources return allAdditionalFields' --query 'data.items[22]' --region 'syd' 
# Windows or Linux
oci search resource structured-search \
    --region 'iad' \
    --query-text "QUERY instance resources return region where (lifeCycleState='running' && freeformTags.key = 'os' && freeformTags.value =~ 'linux' )" \
    --query 'data.items[]."display-name"' \
    | jq  -r '.[]'    
# fault domain
declare -a List=("ocid1.compartment.oc1..aaaaaaaaru2ludrcf5mqncxdhtycqjzlknx2zaz3vdcy6iyxxkjpvccs7pfa" # infrastructure
                "ocid1.compartment.oc1..aaaaaaaa63pkcnjuisxrxwdio3od3xdypeqjl3qnnretcpwhzfuac4zhucka" # NonProductionIntegrum
                "ocid1.compartment.oc1..aaaaaaaaxsmv44frx7l52qwtdguami4mkpex4szgvnhya4isz74xvksa7tra" # ProductionIntegrum
                )
for i in "${List[@]}"
do
   echo "$i"
   oci compute instance list --compartment-id $i --query "data[?\"fault-domain\"=='FAULT-DOMAIN-1'].{name:\"display-name\",faultDomain:\"fault-domain\"}" --output table
done > fault2.txt
for i in "${List[@]}"
do
   oci compute instance list --compartment-id $i --region='syd' --query "data[? \"lifecycle-state\"=='RUNNING' && \"fault-domain\"=='FAULT-DOMAIN-2' ].\"display-name\"" | jq  -r '.[]' 
done
compartment_id="ocid1.compartment.oc1..aaaaaaaa63pkcnjuisxrxwdio3od3xdypeqjl3qnnretcpwhzfuac4zhucka" # NonProductionIntegrum
compartment_id="ocid1.compartment.oc1..aaaaaaaaru2ludrcf5mqncxdhtycqjzlknx2zaz3vdcy6iyxxkjpvccs7pfa" # infrastructure
oci compute instance list --compartment-id $compartment_id --region='syd' --query "data[? \"lifecycle-state\"=='RUNNING' && \"fault-domain\"=='FAULT-DOMAIN-1' ].\"display-name\"" | jq  -r '.[]' 
oci compute instance list --compartment-id $compartment_id --region='syd' --query "data[? \"lifecycle-state\"=='RUNNING' ].\"display-name\"" | jq  -r '.[]' 
# list windows instance with memory
compartment_id="ocid1.compartment.oc1..aaaaaaaa63pkcnjuisxrxwdio3od3xdypeqjl3qnnretcpwhzfuac4zhucka" # NonProductionIntegrum
compartment_id="ocid1.compartment.oc1..aaaaaaaaxsmv44frx7l52qwtdguami4mkpex4szgvnhya4isz74xvksa7tra" # ProductionIntegrum
oci compute instance list --compartment-id $compartment_id --region "lhr" --query "sort_by(data[].{name:\"display-name\",memory:\"shape-config\".\"memory-in-gbs\"},&memory)"  --output table
# live migration
$compartment_id="ocid1.compartment.oc1..aaaaaaaaru2ludrcf5mqncxdhtycqjzlknx2zaz3vdcy6iyxxkjpvccs7pfa" # infrastructure
$compartment_id="ocid1.compartment.oc1..aaaaaaaaxsmv44frx7l52qwtdguami4mkpex4szgvnhya4isz74xvksa7tra" # ProductionIntegrum
$compartment_id="ocid1.compartment.oc1..aaaaaaaa63pkcnjuisxrxwdio3od3xdypeqjl3qnnretcpwhzfuac4zhucka" # NonProductionIntegrum
foreach ($region in ('syd', 'iad', 'lhr','jed','phx','yyz')){
    $region
     oci compute instance list --region "$region" --compartment-id "$compartment_id" --query 'sort_by(data[].{name:"display-name",recoveryAction:"availability-config"."recovery-action",networkType:"launch-options"."network-type",status:"lifecycle-state",liveMigration:"availability-config"."is-live-migration-preferred"},&name)' --output table
}
oci compute instance launch --generate-param-json-input availability-config > sample.json
oci compute instance update --region 'lhr' --instance-id ocid1.instance.oc1.uk-london-1.anwgiljtqcppfhycsoofoecyggzq3cb2v4goaq6a2hxuvqgz73nuz6fns2ga --availability-config  file://sample.json --force